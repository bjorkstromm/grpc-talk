// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TimeService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Time.Net {

  /// <summary>Holder for reflection information generated from TimeService.proto</summary>
  public static partial class TimeServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for TimeService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TimeServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUaW1lU2VydmljZS5wcm90bxIEdGltZRofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byKFAQoQU3Vic2NyaWJlUmVxdWVzdBIQCghpbnRlcnZh",
            "bBgBIAEoERIpCgR1bml0GAIgASgOMhsudGltZS5TdWJzY3JpYmVSZXF1ZXN0",
            "LlVuaXQSDQoFY291bnQYAyABKBEiJQoEVW5pdBIQCgxNaWxsaVNlY29uZHMQ",
            "ABILCgdTZWNvbmRzEAEyUAoLVGltZVNlcnZpY2USQQoJU3Vic2NyaWJlEhYu",
            "dGltZS5TdWJzY3JpYmVSZXF1ZXN0GhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcDABQguqAghUaW1lLk5ldGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Time.Net.SubscribeRequest), global::Time.Net.SubscribeRequest.Parser, new[]{ "Interval", "Unit", "Count" }, null, new[]{ typeof(global::Time.Net.SubscribeRequest.Types.Unit) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SubscribeRequest : pb::IMessage<SubscribeRequest> {
    private static readonly pb::MessageParser<SubscribeRequest> _parser = new pb::MessageParser<SubscribeRequest>(() => new SubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Time.Net.TimeServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest(SubscribeRequest other) : this() {
      interval_ = other.interval_;
      unit_ = other.unit_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest Clone() {
      return new SubscribeRequest(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private int interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Time.Net.SubscribeRequest.Types.Unit unit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Time.Net.SubscribeRequest.Types.Unit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      if (Unit != other.Unit) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Interval);
      }
      if (Unit != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Interval);
      }
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadSInt32();
            break;
          }
          case 16: {
            Unit = (global::Time.Net.SubscribeRequest.Types.Unit) input.ReadEnum();
            break;
          }
          case 24: {
            Count = input.ReadSInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscribeRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Unit {
        [pbr::OriginalName("MilliSeconds")] MilliSeconds = 0,
        [pbr::OriginalName("Seconds")] Seconds = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
